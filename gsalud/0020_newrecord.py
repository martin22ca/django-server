# Generated by Django 4.2.7 on 2024-07-10 14:42

from django.db import migrations, models
import django.db.models.deletion


def transfer_data(apps, schema_editor):
    OldRecord = apps.get_model('gsalud', 'Record')
    NewRecord = apps.get_model('gsalud', 'NewRecord')
    Provider = apps.get_model('gsalud', 'Provider')
    ReceiptType = apps.get_model('gsalud', 'ReceiptType')
    RecordType = apps.get_model('gsalud', 'RecordType')

    for old_record in OldRecord.objects.all():
        new_record = NewRecord(
            # Assuming id_record is the old primary key
            record_key=str(old_record.id_record),
            date_liquid=old_record.date_liquid,
            date_recep=old_record.date_recep,
            date_audi_vto=old_record.date_audi_vto,
            date_period=old_record.date_period,
            totcal=old_record.totcal,
            bruto=old_record.bruto,
            ivacal=old_record.ivacal,
            prestac_grava=old_record.prestac_grava,
            debcal=old_record.debcal,
            inter_debcal=old_record.inter_debcal,
            debito=old_record.debito,
            debtot=old_record.debtot,
            a_pagar=old_record.a_pagar,
            debito_iva=old_record.debito_iva,
            receipt_num=old_record.receipt_num,
            receipt_date=old_record.receipt_date,
            exento=old_record.exento,
            gravado=old_record.gravado,
            iva_factu=old_record.iva_factu,
            iva_perce=old_record.iva_perce,
            iibb=old_record.iibb,
            record_total=old_record.record_total,
            neto_impues=old_record.neto_impues,
            resu_liqui=old_record.resu_liqui,
            cuenta=old_record.cuenta,
            ambu_total=old_record.ambu_total,
            inter_total=old_record.inter_total,
            audit_group=old_record.audit_group,
            date_vto_carga=old_record.date_vto_carga,
            status=old_record.status,
            assigned_user=old_record.assigned_user,
            avance=old_record.avance,
            hashed_val=old_record.hashed_val,
        )

        # Handle foreign key relationships
        if old_record.id_provider:
            new_record.id_provider = Provider.objects.get(
                pk=old_record.id_provider.pk)
        if old_record.id_receipt_type:
            new_record.id_receipt_type = ReceiptType.objects.get(
                pk=old_record.id_receipt_type.pk)
        if old_record.id_record_type:
            new_record.id_record_type = RecordType.objects.get(
                pk=old_record.id_record_type.pk)

        new_record.save()


def update_recordinfo_references(apps, schema_editor):
    NewRecord = apps.get_model('gsalud', 'NewRecord')
    RecordInfo = apps.get_model('gsalud', 'RecordInfo')

    for record_info in RecordInfo.objects.all():
        try:
            new_record = NewRecord.objects.get(
                record_key=str(record_info.id_record.pk))
            record_info.new_id_record = new_record.pk
            record_info.save()
        except NewRecord.DoesNotExist:
            print(
                f"No matching NewRecord found for RecordInfo with id_record: {record_info.id_record.pk}")


class Migration(migrations.Migration):

    dependencies = [
        ('gsalud', '0019_alter_recordinfo_seal_number'),
    ]

    operations = [
        migrations.CreateModel(
            name='NewRecord',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('record_key', models.CharField(max_length=255, unique=True)),
                ('date_liquid', models.DateField(
                    blank=True, default=None, null=True)),
                ('date_recep', models.DateField(blank=True, null=True)),
                ('date_audi_vto', models.DateField(blank=True, null=True)),
                ('date_period', models.DateField(blank=True, null=True)),
                ('totcal', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('bruto', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('ivacal', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('prestac_grava', models.DecimalField(
                    blank=True, decimal_places=2, max_digits=16, null=True)),
                ('debcal', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('inter_debcal', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('debito', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('debtot', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('a_pagar', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('debito_iva', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('receipt_num', models.CharField(
                    blank=True, max_length=15, null=True)),
                ('receipt_date', models.DateField(blank=True, null=True)),
                ('exento', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('gravado', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('iva_factu', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('iva_perce', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('iibb', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('record_total', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('neto_impues', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('resu_liqui', models.FloatField(blank=True, null=True)),
                ('cuenta', models.CharField(blank=True, max_length=12, null=True)),
                ('ambu_total', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('inter_total', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('audit_group', models.IntegerField(blank=True, null=True)),
                ('date_vto_carga', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=15, null=True)),
                ('assigned_user', models.CharField(
                    blank=True, max_length=20, null=True)),
                ('avance', models.DecimalField(blank=True,
                 decimal_places=2, max_digits=16, null=True)),
                ('hashed_val', models.CharField(
                    blank=True, max_length=64, null=True)),
                ('id_provider', models.ForeignKey(db_column='id_provider',
                 on_delete=django.db.models.deletion.DO_NOTHING, to='gsalud.provider')),
                ('id_receipt_type', models.ForeignKey(blank=True, db_column='id_receipt_type',
                 null=True, on_delete=django.db.models.deletion.SET_NULL, to='gsalud.receipttype')),
                ('id_record_type', models.ForeignKey(blank=True, db_column='id_record_type',
                 null=True, on_delete=django.db.models.deletion.SET_NULL, to='gsalud.recordtype')),
            ], options={
                'db_table': 'new_records',
            },
        ),
        migrations.RunPython(transfer_data),


        migrations.AddField(
            model_name='RecordInfo',
            name='new_id_record',
            field=models.BigIntegerField(null=True),
        ),

        migrations.RunPython(update_recordinfo_references),

        migrations.RemoveField(
            model_name='RecordInfo',
            name='id_record',
        ),

        migrations.RenameField(
            model_name='RecordInfo',
            old_name='new_id_record',
            new_name='id_record',
        ),

        migrations.AlterField(
            model_name='RecordInfo',
            name='id_record',
            field=models.ForeignKey(db_column='id_record', on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='gsalud.NewRecord', null=True, blank=True),
        ),

        # Step 3: Remove the old table
        migrations.DeleteModel(
            name='Record',
        ),

        # Step 4: Rename the new table to the original name
        migrations.RenameModel(
            old_name='NewRecord',
            new_name='Record',
        ),
        migrations.AlterModelTable(
            name='Record',
            table='records',
        ),
        migrations.RemoveField(
            model_name='lot',
            name='id_user',
        ),
        migrations.AddField(
            model_name='recordinfo',
            name='id_auditor',
            field=models.ForeignKey(blank=True, db_column='id_auditor', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, to='gsalud.user'),
        ),
        migrations.AlterField(
            model_name='recordinfo',
            name='id_record',
            field=models.OneToOneField(db_column='id_record', on_delete=django.db.models.deletion.DO_NOTHING, to='gsalud.record'),
        ),
    ]
